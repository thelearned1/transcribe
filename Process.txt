But until recently, full-frontal male nudity remained rare enough. 

1. Break string into tokens
2. Given a token, get the phonetic string
	 a. Check for known words
	 b. Apply rules to unknown words
	 c. Update known words with unknown word transcriptions?
3. Recombine these tokens into a string


Apply rules to unknown words



Imagine a rule like this:
```
.group ab 
		_) ab (@ 			a#b
```
the `.group` tells you what the two characters you're looking at are

Within each group are rules, which have this format:

	PRE) ORTHO (POST PHON

'pre' consists of the preceding phonetic string
'ortho' consists of the letters you're looking at 
'post' consists of the succeeding letters (NOT phonetic string)
'phon' consists of how you should transcribe 'ortho'

abilities

	) a ( PHON



https://moschata.net/resources/espeak_dictionarydoc.html
https://moschata.net/resources/espeak_en_rules.txt

// Definitions of A, B, C, H, F, G, Y
	SetLetterBits(tr,0,"aeiou");  // A  vowels, except y
	SetLetterBits(tr,1,"bcdfgjklmnpqstvxz");      // B  hard consonants, excluding h,r,w
	SetLetterBits(tr,2,"bcdfghjklmnpqrstvwxz");  // C  all consonants
	SetLetterBits(tr,3,"hlmnr");                 // H  'soft' consonants
	SetLetterBits(tr,4,"cfhkpqstx");             // F  voiceless consonants
	SetLetterBits(tr,5,"bdgjlmnrvwyz");   // G voiced
	SetLetterBits(tr,6,"eiy");   // Letter group Y, front vowels
	SetLetterBits(tr,7,"aeiouy");  // vowels, including y


	a (CCX

'a' is followed by two consonants and there is no vowel until the word
boundary

{
	pre: (str)=>true,
	ortho: 'a',
	post: (str) => (regex.match(str, '^[:consonant:]{2}') and
									not(regex.match(str, '^.*[:vowel:].*$)),
	score: 2.0
} // rule on line 51